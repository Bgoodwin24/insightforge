// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: datasets.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDataset = `-- name: CreateDataset :one
INSERT INTO datasets (
    id,
    user_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, name, description, created_at, updated_at, public
`

type CreateDatasetParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, createDataset,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}

const createDatasetField = `-- name: CreateDatasetField :exec
INSERT INTO dataset_fields (id, dataset_id, name, data_type, description, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateDatasetFieldParams struct {
	ID          uuid.UUID
	DatasetID   uuid.UUID
	Name        string
	DataType    string
	Description sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) CreateDatasetField(ctx context.Context, arg CreateDatasetFieldParams) error {
	_, err := q.db.ExecContext(ctx, createDatasetField,
		arg.ID,
		arg.DatasetID,
		arg.Name,
		arg.DataType,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const createDatasetRecord = `-- name: CreateDatasetRecord :exec
INSERT INTO dataset_records (id, dataset_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateDatasetRecordParams struct {
	ID        uuid.UUID
	DatasetID uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateDatasetRecord(ctx context.Context, arg CreateDatasetRecordParams) error {
	_, err := q.db.ExecContext(ctx, createDatasetRecord,
		arg.ID,
		arg.DatasetID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createRecordValue = `-- name: CreateRecordValue :exec
INSERT INTO record_values (record_id, field_id, value)
VALUES ($1, $2, $3)
`

type CreateRecordValueParams struct {
	RecordID uuid.UUID
	FieldID  uuid.UUID
	Value    sql.NullString
}

func (q *Queries) CreateRecordValue(ctx context.Context, arg CreateRecordValueParams) error {
	_, err := q.db.ExecContext(ctx, createRecordValue, arg.RecordID, arg.FieldID, arg.Value)
	return err
}

const deleteDataset = `-- name: DeleteDataset :exec
DELETE FROM datasets
WHERE id = $1 AND user_id = $2
`

type DeleteDatasetParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteDataset(ctx context.Context, arg DeleteDatasetParams) error {
	_, err := q.db.ExecContext(ctx, deleteDataset, arg.ID, arg.UserID)
	return err
}

const deleteDatasetField = `-- name: DeleteDatasetField :exec
DELETE FROM dataset_fields
WHERE id = $1 AND dataset_id = $2
`

type DeleteDatasetFieldParams struct {
	ID        uuid.UUID
	DatasetID uuid.UUID
}

func (q *Queries) DeleteDatasetField(ctx context.Context, arg DeleteDatasetFieldParams) error {
	_, err := q.db.ExecContext(ctx, deleteDatasetField, arg.ID, arg.DatasetID)
	return err
}

const getDatasetByID = `-- name: GetDatasetByID :one
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE id = $1
`

func (q *Queries) GetDatasetByID(ctx context.Context, id uuid.UUID) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByID, id)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}

const getDatasetField = `-- name: GetDatasetField :one
SELECT id, dataset_id, name, data_type, description, created_at FROM dataset_fields WHERE id = $1 AND dataset_id = $2
`

type GetDatasetFieldParams struct {
	ID        uuid.UUID
	DatasetID uuid.UUID
}

func (q *Queries) GetDatasetField(ctx context.Context, arg GetDatasetFieldParams) (DatasetField, error) {
	row := q.db.QueryRowContext(ctx, getDatasetField, arg.ID, arg.DatasetID)
	var i DatasetField
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Name,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getDatasetFields = `-- name: GetDatasetFields :many
SELECT id, dataset_id, name, data_type, description, created_at FROM dataset_fields
WHERE dataset_id = $1
ORDER BY name
`

func (q *Queries) GetDatasetFields(ctx context.Context, datasetID uuid.UUID) ([]DatasetField, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetFields, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatasetField
	for rows.Next() {
		var i DatasetField
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Name,
			&i.DataType,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDatasetRecords = `-- name: GetDatasetRecords :many
SELECT id, dataset_id, created_at, updated_at FROM dataset_records
WHERE dataset_id = $1
ORDER BY created_at
`

func (q *Queries) GetDatasetRecords(ctx context.Context, datasetID uuid.UUID) ([]DatasetRecord, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetRecords, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatasetRecord
	for rows.Next() {
		var i DatasetRecord
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFieldsByDatasetID = `-- name: GetFieldsByDatasetID :many
SELECT id, name, data_type, description, created_at, dataset_id
FROM dataset_fields
WHERE dataset_id = $1
ORDER BY created_at ASC
`

type GetFieldsByDatasetIDRow struct {
	ID          uuid.UUID
	Name        string
	DataType    string
	Description sql.NullString
	CreatedAt   time.Time
	DatasetID   uuid.UUID
}

func (q *Queries) GetFieldsByDatasetID(ctx context.Context, datasetID uuid.UUID) ([]GetFieldsByDatasetIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFieldsByDatasetID, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFieldsByDatasetIDRow
	for rows.Next() {
		var i GetFieldsByDatasetIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DataType,
			&i.Description,
			&i.CreatedAt,
			&i.DatasetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordValuesByDatasetID = `-- name: GetRecordValuesByDatasetID :many
SELECT record_id, field_id, value
FROM record_values
WHERE record_id IN (
    SELECT id FROM dataset_records WHERE dataset_id = $1
)
`

func (q *Queries) GetRecordValuesByDatasetID(ctx context.Context, datasetID uuid.UUID) ([]RecordValue, error) {
	rows, err := q.db.QueryContext(ctx, getRecordValuesByDatasetID, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecordValue
	for rows.Next() {
		var i RecordValue
		if err := rows.Scan(&i.RecordID, &i.FieldID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordValuesByRecordID = `-- name: GetRecordValuesByRecordID :many
SELECT record_id, field_id, value FROM record_values
WHERE record_id = $1
`

func (q *Queries) GetRecordValuesByRecordID(ctx context.Context, recordID uuid.UUID) ([]RecordValue, error) {
	rows, err := q.db.QueryContext(ctx, getRecordValuesByRecordID, recordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecordValue
	for rows.Next() {
		var i RecordValue
		if err := rows.Scan(&i.RecordID, &i.FieldID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsByDatasetID = `-- name: GetRecordsByDatasetID :many
SELECT id, dataset_id, created_at, updated_at
FROM dataset_records
WHERE dataset_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetRecordsByDatasetID(ctx context.Context, datasetID uuid.UUID) ([]DatasetRecord, error) {
	rows, err := q.db.QueryContext(ctx, getRecordsByDatasetID, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatasetRecord
	for rows.Next() {
		var i DatasetRecord
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasetsForUser = `-- name: ListDatasetsForUser :many
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE user_id = $3
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDatasetsForUserParams struct {
	Limit  int32
	Offset int32
	ID     uuid.UUID
}

func (q *Queries) ListDatasetsForUser(ctx context.Context, arg ListDatasetsForUserParams) ([]Dataset, error) {
	rows, err := q.db.QueryContext(ctx, listDatasetsForUser, arg.Limit, arg.Offset, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Public,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDatasetByName = `-- name: SearchDatasetByName :many
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE user_id = $1
  AND (
    $2::text IS NULL OR name ILIKE '%' || $2::text || '%'
  )
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type SearchDatasetByNameParams struct {
	UserID  uuid.UUID
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchDatasetByName(ctx context.Context, arg SearchDatasetByNameParams) ([]Dataset, error) {
	rows, err := q.db.QueryContext(ctx, searchDatasetByName,
		arg.UserID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Public,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataset = `-- name: UpdateDataset :one
UPDATE datasets
SET
    name = $1,
    description = $2,
    updated_at = $3
WHERE id = $4
RETURNING id, user_id, name, description, created_at, updated_at, public
`

type UpdateDatasetParams struct {
	Name        string
	Description sql.NullString
	UpdatedAt   time.Time
	ID          uuid.UUID
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, updateDataset,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}

const updateDatasetRows = `-- name: UpdateDatasetRows :exec
WITH updated AS (
    UPDATE dataset_records
    SET updated_at = $2
    WHERE dataset_id = $1
    RETURNING id
)
UPDATE record_values
SET value = $3
WHERE record_id IN (SELECT id FROM updated) AND field_id = $4
`

type UpdateDatasetRowsParams struct {
	DatasetID uuid.UUID
	UpdatedAt time.Time
	Value     sql.NullString
	FieldID   uuid.UUID
}

func (q *Queries) UpdateDatasetRows(ctx context.Context, arg UpdateDatasetRowsParams) error {
	_, err := q.db.ExecContext(ctx, updateDatasetRows,
		arg.DatasetID,
		arg.UpdatedAt,
		arg.Value,
		arg.FieldID,
	)
	return err
}

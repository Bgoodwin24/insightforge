// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pending_users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPendingUser = `-- name: CreatePendingUser :one
INSERT INTO pending_users (id, email, username, password_hash, token, created_at, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, email, username, password_hash, token, created_at, expires_at
`

type CreatePendingUserParams struct {
	ID           uuid.UUID
	Email        string
	Username     string
	PasswordHash string
	Token        string
	CreatedAt    time.Time
	ExpiresAt    time.Time
}

func (q *Queries) CreatePendingUser(ctx context.Context, arg CreatePendingUserParams) (PendingUser, error) {
	row := q.db.QueryRowContext(ctx, createPendingUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.Token,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deletePendingUserByID = `-- name: DeletePendingUserByID :exec
DELETE FROM pending_users WHERE id = $1
`

func (q *Queries) DeletePendingUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePendingUserByID, id)
	return err
}

const getPendingUserByToken = `-- name: GetPendingUserByToken :one
SELECT id, email, username, password_hash, token, created_at, expires_at FROM pending_users 
WHERE token = $1 AND created_at > NOW() - INTERVAL '1 hour'
`

func (q *Queries) GetPendingUserByToken(ctx context.Context, token string) (PendingUser, error) {
	row := q.db.QueryRowContext(ctx, getPendingUserByToken, token)
	var i PendingUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

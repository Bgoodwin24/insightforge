// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: datasets.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDataset = `-- name: CreateDataset :one
INSERT INTO datasets (
    id,
    user_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, name, description, created_at, updated_at, public
`

type CreateDatasetParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, createDataset,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}

const deleteDataset = `-- name: DeleteDataset :exec
DELETE FROM datasets
WHERE id = $1 AND user_id = $2
`

type DeleteDatasetParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteDataset(ctx context.Context, arg DeleteDatasetParams) error {
	_, err := q.db.ExecContext(ctx, deleteDataset, arg.ID, arg.UserID)
	return err
}

const getDatasetByID = `-- name: GetDatasetByID :one
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE id = $1
`

func (q *Queries) GetDatasetByID(ctx context.Context, id uuid.UUID) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByID, id)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}

const listDatasetsForUser = `-- name: ListDatasetsForUser :many
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE user_id = $3
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDatasetsForUserParams struct {
	Limit  int32
	Offset int32
	ID     uuid.UUID
}

func (q *Queries) ListDatasetsForUser(ctx context.Context, arg ListDatasetsForUserParams) ([]Dataset, error) {
	rows, err := q.db.QueryContext(ctx, listDatasetsForUser, arg.Limit, arg.Offset, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Public,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDatasetByName = `-- name: SearchDatasetByName :many
SELECT id, user_id, name, description, created_at, updated_at, public FROM datasets
WHERE user_id = $3 
  AND ($4 IS NULL OR name ILIKE '%' || $4 || '%')
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type SearchDatasetByNameParams struct {
	Limit  int32
	Offset int32
	UserID uuid.UUID
	Search interface{}
}

func (q *Queries) SearchDatasetByName(ctx context.Context, arg SearchDatasetByNameParams) ([]Dataset, error) {
	rows, err := q.db.QueryContext(ctx, searchDatasetByName,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Public,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataset = `-- name: UpdateDataset :one
UPDATE datasets
SET
    name = $1,
    description = $2,
    updated_at = $3
WHERE id = $4
RETURNING id, user_id, name, description, created_at, updated_at, public
`

type UpdateDatasetParams struct {
	Name        string
	Description sql.NullString
	UpdatedAt   time.Time
	ID          uuid.UUID
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, updateDataset,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Public,
	)
	return i, err
}
